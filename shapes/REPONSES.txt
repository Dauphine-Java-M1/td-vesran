Exercice 1 :

1) Le code fonctionne car les attributs de la classe Point x et y de type int sont mises à 0 si aucune affectation leur est attribuée.
Ainsi, p.x et p.y valent 0.

2) En lançant le même code sur une classe différente, on obtient une erreur nous indiquant que les attributs de la classe Point
x et y ne sont pas accessibles à cause de leur niveau de visibilité privé.
Afin d'y remédier, il est possible de changer le niveau de visibilité (en public par exemple) ou encore en implémentant des
accesseurs (des getters) pour que la valeur des attributs puissent être renvoyés par appel des méthodes en question (p.getX() et p.getY() par exemple).

3) L'avantage d'utiliser un champ privé est d'assurer que la variable ne sera pas changée en dehors de sa classe.

4) Un accesseur est une méthode renvoyant la valeur d'un attribut dont sa visibilité est privée (getter).
Il peut être intéressant de le faire dans la classe Point afin de pouvoir récupérer les valeurs x et y.

5)
6)

7) Pour connaitre le nombre de points créés, il suffit de mettre en place une variable static dans la classe Point et de l'incrémenter
chaque fois qu'un objet Point est instancié.

8) Le compilateur sait quel constructeur doit être appelé grâce à la signature du constructeur, plus précisemment au niveau
du nombre et des types des variables passées en paramètre du constructeur.


Exercice 2 :

1) p1 == p2 donne true car les variables p1 t p2 sont références à la même adresse mémoire contrairement au variable p1 et
p3 qui sont différentes (2 appels de la méthode new).

3) Le compilateur nous indiquera que p2 est dans la liste à la position 0 et p3 ne l'est pas (position -1)
malgré le fait que les coordonnées soient les mêmes.
La méthode indexOf de ArrayList utilise la méthode equals de Point qui n'a pas été définie jusqu'à présent. Par défaut, le compilateur va utiliser
la méthode equals de la class Object.

Exercice 3 :

2) Si la capacité est dépassée, une erreur est affichée.

5) Si on fait un contains(null), on peut avoir un réponse positive même si aucun add(null) n'a été réalisé auparavant car
les cases vides du tableau sont initialisées à null. En faisant un add(null), rien ne change.

6) capacityPoint ne sert plus car la capacity d'une liste n'est pas connue/supposée très grande.
nbPoints et contains reprennent les méthodes size() et contains de LinkedList.



