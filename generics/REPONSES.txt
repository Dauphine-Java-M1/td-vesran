#######################################################################
# EXERCICE 1
#######################################################################

2) Pour que la méthode ne compile pas lorsqu'aucun argument est passé en paramètre, il suffit de lancer une exception
lorsque le paramètre est null.

4) L'interface Comparable<T> contient une méthode compareTo(T t) qui renvoie un integer popsitif ou négatif. Cela permet
d'ordonner deux objets selon le signe de l'entier renvoyé. Une classe qui implémente Comparable<T> représente un objet
qui peut être comparer à l'objet de type T.


#######################################################################
# EXERCICE 2
#######################################################################

1) Ce code ne compile pas car une list d'Object n'est pas une list de String. L'élément donné en paramètre ne
concorde donc pas avec ce qui est attendu.

2) On peut utiliser une wildcard.


#######################################################################
# EXERCICE 3
#######################################################################

2) Si on utilise la méthode list.get(i), on a une complexité en O(n^2) avec une LinkedList.
On peut améliorer la complixité en utilisant des Iterators.


#######################################################################
# EXERCICE 5
#######################################################################

3) Si la liste passée en paramètre est une ArrayList, l'accès est est O(1) et par conséquent, cet algorithme de mélange
est en O(n) puisque la liste est parcourue une seule fois.
En revanche, si l'accès à la liste est en 0(n), alors le mélange est en O(n^2).
Il est possible de restreindre le paramètre aux listes implémentant RandomAccess afin de préserver une complexité en
O(n).